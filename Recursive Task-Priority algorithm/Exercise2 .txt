from lab4_robotics import * # Includes numpy import
import matplotlib.pyplot as plt
import matplotlib.animation as anim

# Robot model - 3-link manipulator
d = np.zeros(3)                            # displacement along Z-axis
theta = np.array([0,0.6,0.3])            # rotation around Z-axis
alpha = np.zeros(3)                      # rotation around X-axis
a = np.array([0.75, 0.5, 0.5])                            # displacement along X-axis
revolute = [True, True, True]                       # flags specifying the type of joints
robot = Manipulator(d, theta, a, alpha, revolute) # Manipulator object
max_velocity = 1  # Maximum joint velocity limit

# Task hierarchy definition
tasks = [
    Position2D("End-effector position", np.array([1.0, 0.5]).reshape(2,1),3),
    Orientation2D("2nd-link orientation", np.array([[0]]),2),
]

# Gain Matrix
K = 1
tasks[0].setGainMatrix(K)   # Set the gain matrix for the first task
# FeedForward Velocity
ff = 0.0
tasks[0].setFeedforward(ff)  # Set the feedforward velocity for the first task

# Simulation params
dt = 1.0/60.0

# Drawing preparation
fig = plt.figure()
ax = fig.add_subplot(111, autoscale_on=False, xlim=(-2, 2), ylim=(-2,2))
ax.set_title('Simulation')
ax.set_aspect('equal')
ax.grid()
ax.set_xlabel('x[m]')
ax.set_ylabel('y[m]')
line, = ax.plot([], [], 'o-', lw=2) # Robot structure
path, = ax.plot([], [], 'c-', lw=1) # End-effector path
point, = ax.plot([], [], 'rx') # Target
PPx = []
PPy = []
time = []        # List to store simulation time


# Simulation initialization
def init():
    global tasks , i
    line.set_data([], [])
    path.set_data([], [])
    point.set_data([], [])
    if tasks[0].name == "End-effector configuration":
        tasks[0].setDesired(np.random.uniform(-1,1,size = (3,1)))   # Random configuration
    else:
        tasks[0].setDesired(np.random.uniform(-1,1,size = (2,1)))   # Random position
    if time:
      i = time[-1]            # Continue time from the last simulation
    else: i = 0
    return line, path, point

# Simulation loop
def simulate(t):
    global tasks
    global robot
    global PPx, PPy, i

    ### Recursive Task-Priority algorithm
    # Initialize null-space projector
    P = np.eye(robot.getDOF())
    # Initialize output vector (joint velocity)
    dq = np.zeros((robot.getDOF(),1))
    # Loop over tasks
    
    for task in tasks:

        # Update task state
        task.update(robot)
        # Compute augmented Jacobian
        J = task.getJacobian()
        J_bar = J @ P
        # Compute task velocity
        e = task.getError()               # get the task error
        K = task.getGainMatrix()          # get the task gain matrix
        ff = task.getFeedforward()        # get the feedforward velocity
        dq_acc = DLS(J_bar, 0.1) @ ( (K @ e + ff ) - (J @ dq))
        # Accumulate velocity
        dq += dq_acc
        # Normalize joint velocities to respect maximum velocity limits
        s = np.max(dq/max_velocity)        # Check if velocities exceed the limit
        if s>1 : 
            dq = dq/s
        # Update null-space projector
        P = P -np.linalg.pinv(J_bar) @ J_bar 

    # Update robot
    robot.update(dq, dt)
    
    # Update drawing
    PP = robot.drawing()
    line.set_data(PP[0,:], PP[1,:])
    PPx.append(PP[0,-1])
    PPy.append(PP[1,-1])
    path.set_data(PPx, PPy)
    point.set_data(tasks[0].getDesired()[0], tasks[0].getDesired()[1])

    time.append(t + i )   # Update the simulation time

    return line, path, point

# Run simulation
animation = anim.FuncAnimation(fig, simulate, np.arange(0, 10, dt), 
                                interval=10, blit=True, init_func=init, repeat=True)
plt.show()

# Evolution of the norm control errors
fig_joint = plt.figure()
ax = fig_joint.add_subplot(111, autoscale_on=False, xlim=(0, 60), ylim=(-1, 2))
ax.set_title("Task-Priority (two tasks)")
ax.set_xlabel("Time[s]")
ax.set_ylabel("Error")
ax.grid()
plt.plot(time, tasks[0].error, label="e1 ({})".format(tasks[0].name))
plt.plot(time, tasks[1].error, label="e2 ({})".format(tasks[1].name))
ax.legend()
plt.show()
