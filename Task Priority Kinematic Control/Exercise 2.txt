# Import necessary libraries
from Common import * # Includes numpy import
import matplotlib.pyplot as plt
import matplotlib.animation as anim

# Robot definition (3 revolute joint planar manipulator)
d = np.zeros(3) # displacement along Z-axis
q = np.array([0, 0.6, 0.3]).reshape(3,1) # rotation around Z-axis (theta)
alpha = np.zeros(3) # displacement along X-axis
a = np.array([0.75, 0.5, 0.5]) # rotation around X-axis 
revolute = [True, True, True] # flags specifying the type of joints

#Task_Priority = 'Task EE'
Task_Priority = 'Task Joint1'

# Desired values of task variables
sigma1_d = np.array([0.0, 1.0]).reshape(2,1) # Position of the end-effector
sigma2_d = np.array([[0.0]]) # Position of joint 1

# Simulation params
dt = 1.0/60.0
Tt = 10 # Total simulation time
tt = np.arange(0, Tt, dt) # Simulation time vector

# Drawing preparation
fig = plt.figure()
ax = fig.add_subplot(111, autoscale_on=False, xlim=(-2, 2), ylim=(-2,2))
ax.set_title('Simulation')
ax.set_aspect('equal')
ax.set_xlabel('x[m]')
ax.set_ylabel('y[m]')
ax.grid()
line, = ax.plot([], [], 'o-', lw=2) # Robot structure
path, = ax.plot([], [], 'c-', lw=1) # End-effector path
point, = ax.plot([], [], 'rx') # Target
PPx = []
PPy = []

e1 = []
e2 = []
time = []         # List to store all time steps
i = 0             # variable used to store the last recorded time step 

dq12_max = 1      # maximum allowed joint velocity vector

# Simulation initialization
def init():
    global sigma1_d, i
    line.set_data([], [])
    path.set_data([], [])
    point.set_data([], [])
    if time:
       i = time[-1] 
    else: i = 0
    sigma1_d = np.random.uniform(-1, 1, size=(2, 1))
    return line, path, point

# Simulation loop
def simulate(t):
    global q, a, d, alpha, revolute, sigma1_d, sigma2_d
    global PPx, PPy
    # Update robot
    T = kinematics(d, q.flatten(), a, alpha)
    J = jacobian(T, revolute)

    # Update control
    if Task_Priority == 'Task EE':
        # TASK 1
        sigma1 = T[-1][:2,3].reshape(2,1) # Current position of the end-effector
        err1 = sigma1_d - sigma1 # Error in Cartesian position
        J1 = J[:2, :] # Jacobian of the first task
        Jbar_inv = np.linalg.pinv(J1)
        I = np.eye(3) 
        P1 = I - (Jbar_inv @ J1) # Null space projector
        # TASK 2
        sigma2 = q[0] # Current position of joint 1
        err2 = sigma2_d - sigma2 # Error in joint position
        J2 = np.array([1, 0, 0]).reshape(1,3) # Jacobian of the second task
        J2bar = J2 @ P1 # Augmented Jacobian
        # Combining tasks
        dq1 = (DLS(J1,0.1) @ err1).reshape(3, 1) # Velocity for the first task
        dq12 = dq1 + (DLS(J2bar, 0.1)) @ (err2 - J2 @ dq1) # Velocity for both tasks

    else : 
        # TASK 1
        sigma2 = q[0] # Current position of the end-effector
        err2 = sigma2_d - sigma2 # Error in Cartesian position
        J1 = np.array([1, 0, 0]).reshape(1,3) # Jacobian of the first task
        Jbar_inv = np.linalg.pinv(J1)
        I = np.eye(3)
        P1 = I - (Jbar_inv @ J1) # Null space projector
        # TASK 2
        sigma1 = T[-1][:2,3].reshape(2,1) # Current position of joint 1
        err1 = sigma1_d - sigma1 # Error in joint position
        J2 = J[:2, :] # Jacobian of the second task
        J2bar = J2 @ P1 # Augmented Jacobian
        # Combining tasks
        dq1 = (DLS(J1,0.1) @ err2).reshape(3, 1) # Velocity for the first task
        dq12 = dq1 + (DLS(J2bar, 0.1)) @ (err1 - J2 @ dq1) # Velocity for both tasks
    
    # Make sure the output velocity does not exceed the maximum joint velocity limit
    s = np.max(dq12/dq12_max)   # s is the maximum ratio 
    if s > 1:
        dq12 = dq12/s

    q = q + dq12 * dt # Simulation update

    # Update drawing
    PP = robotPoints2D(T)
    line.set_data(PP[0,:], PP[1,:])
    PPx.append(PP[0,-1])
    PPy.append(PP[1,-1])
    path.set_data(PPx, PPy)
    point.set_data(sigma1_d[0], sigma1_d[1])



    e1.append(np.linalg.norm(err1))      # store the history of error magnitude for task1
    e2.append(np.linalg.norm(err2))      # store the history of error magnitude for task2

    # Store total timestamp of the simulation 
    time.append(t + i)

    return line, path, point

# Run simulation
animation = anim.FuncAnimation(fig, simulate, np.arange(0, 10, dt), 
interval=10, blit=True, init_func=init, repeat=True)
plt.show()


# Post simulation plotting
fig_joint = plt.figure()
ax = fig_joint.add_subplot(111, autoscale_on=False, xlim=(0, 60), ylim=(-1, 2))
ax.set_title("Task-Priority (two tasks)")
ax.set_xlabel("Time[s]")
ax.set_ylabel("Error")
ax.grid()
plt.plot(time, e1, label="e1 (end-effector position)")
plt.plot(time, e2, label="e2 (joint 1 position)")
ax.legend(loc='upper right')
plt.show()




