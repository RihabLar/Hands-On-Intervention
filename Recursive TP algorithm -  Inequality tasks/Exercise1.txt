from lab4_robotics import * # Includes numpy import
import matplotlib.pyplot as plt
import matplotlib.animation as anim
import matplotlib.patches as patch

# Robot model
d = np.zeros(3)                     # displacement along Z-axis
theta = np.array([0,0.6,0.3])       # rotation around Z-axis
alpha = np.zeros(3)                 # rotation around X-axis
a = np.array([0.5, 0.75, 0.5])      # displacement along X-axis
revolute = [True, True, True]       # flags specifying the type of joints
robot = Manipulator(d, theta, a, alpha, revolute) # Manipulator object

# Task hierarchy definition
# Define obstacle positions and radii
obstacle_pos1 = np.array([0.0, 1.0]).reshape(2,1)
obstacle_pos2 = np.array([1.0, -0.5]).reshape(2,1)
obstacle_pos3 = np.array([-0.5, -1.0]).reshape(2,1)
obstacle_r1 = 0.5
obstacle_r2 = 0.4
obstacle_r3 = 0.3

# Define tasks: obstacle avoidance and end-effector position control
tasks = [ 
          Obstacle2D("Obstacle avoidance", obstacle_pos1, np.array([obstacle_r1, obstacle_r1+0.05])),
          Obstacle2D("Obstacle avoidance", obstacle_pos2, np.array([obstacle_r2, obstacle_r2+0.05])),
          Obstacle2D("Obstacle avoidance", obstacle_pos3, np.array([obstacle_r3, obstacle_r3+0.05])),
          Position2D("End-effector position", np.array([1.0, 0.5]).reshape(2,1))
        ] 

# Simulation params
dt = 1.0/60.0

# Drawing preparation
fig = plt.figure()
ax = fig.add_subplot(111, autoscale_on=False, xlim=(-2, 2), ylim=(-2,2))
ax.set_title('Simulation')
ax.set_aspect('equal')
ax.grid()
ax.set_xlabel('x[m]')
ax.set_ylabel('y[m]')
ax.add_patch(patch.Circle(obstacle_pos1.flatten(), obstacle_r1, color='red', alpha=0.3))
ax.add_patch(patch.Circle(obstacle_pos2.flatten(), obstacle_r2, color='blue', alpha=0.3))
ax.add_patch(patch.Circle(obstacle_pos3.flatten(), obstacle_r3, color='green', alpha=0.3))
line, = ax.plot([], [], 'o-', lw=2) # Robot structure
path, = ax.plot([], [], 'c-', lw=1) # End-effector path
point, = ax.plot([], [], 'rx') # Target

# Global variables for storing end-effector path and simulation time
PPx = []
PPy = []
time = []

# Simulation initialization
def init():
    global tasks, i
    line.set_data([], [])
    path.set_data([], [])
    point.set_data([], [])
    tasks[-1].setDesired(np.random.uniform(-1,1,size = (2,1)))   # Random position
    if time:
       i = time[-1]  # Continue time from the last simulation
    else: i = 0
    return line, path, point

# Simulation loop
def simulate(t):
    global tasks
    global robot
    global PPx, PPy
    
    ### Recursive Task-Priority algorithm (w/set-based tasks)
    # The algorithm works in the same way as in Lab4. 
    # The only difference is that it checks if a task is active.
    ###
    # Initialize null-space projector
    P = np.eye(robot.getDOF())
    # Initialize output vector (joint velocity)
    dq = np.zeros((robot.getDOF(),1))
    # Loop over tasks
    
    for task in tasks:
        # Update task state
        task.update(robot)
        if task.isActive(): 
            # Compute augmented Jacobian
            J = task.getJacobian()
            J_bar = J @ P
            # Compute task velocity
            dq_acc = DLS(J_bar, 0.1) @ ((task.getError()) - (J @ dq))
            # Accumulate velocity
            dq += dq_acc
            # Update null-space projector
            P = P -np.linalg.pinv(J_bar) @ J_bar  

    # Update robot
    robot.update(dq, dt)
    
    # Update drawing
    PP = robot.drawing()
    line.set_data(PP[0,:], PP[1,:])
    PPx.append(PP[0,-1])
    PPy.append(PP[1,-1])
    path.set_data(PPx, PPy)
    point.set_data(tasks[-1].getDesired()[0], tasks[-1].getDesired()[1])

    time.append(t+i)    # Store simulation time
    
    return line, path, point

# Run simulation
animation = anim.FuncAnimation(fig, simulate, np.arange(0, 10, dt), 
                                interval=10, blit=True, init_func=init, repeat=True)
plt.show()
# Evolution of task errors over time
fig_joint = plt.figure()
ax = fig_joint.add_subplot(111, autoscale_on=False, xlim=(0, 60), ylim=(-1, 2))
ax.set_title("Task-Priority inequality tasks")
ax.set_xlabel("Time[s]")
ax.set_ylabel("Error")
ax.grid()
# Plot task errors over time
plt.plot(time, tasks[0].error, label="d_1 (distance to obstacle 1)")
plt.plot(time, tasks[1].error, label="d_2 (distance to obstacle 2)")
plt.plot(time, tasks[2].error, label="d_3 (distance to obstacle 3)")
plt.plot(time, tasks[-1].error, label="e_1 (end-effector position error)")
ax.legend()
plt.show()