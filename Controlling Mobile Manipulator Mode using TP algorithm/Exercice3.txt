from lab6_robotics import * # Includes numpy import
from lab4_robotics import *
from Common import *
import matplotlib.pyplot as plt
import matplotlib.patches as patch
import matplotlib.animation as anim
import matplotlib.transforms as trans

# Robot model
d = np.zeros(3)                     # displacement along Z-axis
theta = np.array([0,0.6,0.3])       # rotation around Z-axis
alpha = np.zeros(3)                 # rotation around X-axis
a = np.array([0.5, 0.75, 0.5])      # displacement along X-axis
revolute = [True, True, True]       # flags specifying the type of joints
robot = MobileManipulator(d, theta, a, alpha, revolute, mode = 'move') # Manipulator object

# Configuration list for the end-effector task
configuration_list = [np.array([1, 1.5, np.pi]).reshape(3, 1),
                np.array([-0.5, -1.5, np.pi/2]).reshape(3, 1),
                np.array([1.6, -1, np.pi/4]).reshape(3, 1),
                np.array([1.8, -0.7, np.pi/4]).reshape(3, 1)]
configuration_idx = 0

# Task definition
tasks = [ Configuration2D("End-Effector Position", np.array([1, 1, 0]).reshape(3, 1))] 

# Simulation params
dt = 1.0/60.0

# Drawing preparation
fig = plt.figure()
ax = fig.add_subplot(111, autoscale_on=False, xlim=(-2, 2), ylim=(-2,2))
ax.set_title('Simulation')
ax.set_aspect('equal')
ax.grid()
ax.set_xlabel('x[m]')
ax.set_ylabel('y[m]')
rectangle = patch.Rectangle((-0.25, -0.15), 0.5, 0.3, color='blue', alpha=0.3)
veh = ax.add_patch(rectangle)
line, = ax.plot([], [], 'o-', lw=2) # Robot structure
path, = ax.plot([], [], 'c-', lw=1) # End-effector path
point, = ax.plot([], [], 'rx') # Target
PPx = []
PPy = []

time = []                          
velocities = []                    # to store the joint velocities to be used in the second plot.
EE_pos=[[],[]]                    # to store the ee position of each joint to be used in the second plot.
base_pos=[[],[]]                  # to store the base position to be used in the second plot.

# Simulation initialization
def init():
    global tasks, i
    global configuration_idx
    line.set_data([], [])
    path.set_data([], [])
    point.set_data([], [])
    tasks[-1].setDesired(configuration_list[configuration_idx % len(configuration_list)])
    configuration_idx += 1
  # Random position
    if time:
       i = time[-1]  # Continue time from the last simulation
    else: i = 0
    return line, path, point

# Simulation loop
def simulate(t):
    global tasks
    global robot
    global PPx, PPy, i
    
    ### Recursive Task-Priority algorithm

   # Initialize null-space projector
    P = np.eye(robot.getDOF())
    # Initialize output vector (joint velocity)
    dq = np.zeros((robot.getDOF(),1))
    # Loop over tasks
    
    for task in tasks:
        # Update task state
        task.update(robot)
        if task.isActive(): 
            # Compute augmented Jacobian
            J = task.getJacobian()
            J_bar = J @ P
            # Compute task velocity
            W = np.eye(robot.getDOF())
            dq_acc = Weighted_DLS(J_bar, 0.1, W) @ ((task.getError()) - (J @ dq))
            # Accumulate velocity
            dq += dq_acc
            # Update null-space projector
            P = P -np.linalg.pinv(J_bar) @ J_bar  
            velocities.append(dq)

            EE_pos[0].append(robot.getEETransform()[0, 3])
            EE_pos[1].append(robot.getEETransform()[1, 3])
            base_pos[0].append(robot.getBasePose()[0, 0])
            base_pos[1].append(robot.getBasePose()[1, 0])


    # Update robot
    robot.update(dq, dt)
    
    # Update drawing
    # -- Manipulator links
    PP = robot.drawing()
    line.set_data(PP[0,:], PP[1,:])
    PPx.append(PP[0,-1])
    PPy.append(PP[1,-1])
    path.set_data(PPx, PPy)
    point.set_data(tasks[0].getDesired()[0], tasks[0].getDesired()[1])
    # -- Mobile base
    eta = robot.getBasePose()
    veh.set_transform(trans.Affine2D().rotate(eta[2,0]) + trans.Affine2D().translate(eta[0,0], eta[1,0]) + ax.transData)

    time.append(t+i)
    return line, veh, path, point

# Run simulation
animation = anim.FuncAnimation(
    fig, simulate, np.arange(0, 10, dt), 
    interval=10, blit=True, init_func=init, repeat=True # <--- Don't repeat
)
plt.show()

fig_joint = plt.figure()
ax = fig_joint.add_subplot(111, autoscale_on=True)
ax.set_title("End-Effector Configuration Task Error")
ax.set_xlabel("Time[s]")
ax.set_ylabel("Error")
ax.grid()

ax.plot(time, tasks[0].error[0], label="Position Error (Norm)")
ax.plot(time, tasks[0].error[1], label="Orientation Error (Magnitude)")
ax.legend()
plt.show()

# Save EE_pos and base_pos to file
np.save('move then rotate.npy',[EE_pos,base_pos])
#np.save('rotate then move.npy',[EE_pos,base_pos])
#np.save('move and rotate.npy',[EE_pos,base_pos])
